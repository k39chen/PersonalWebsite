{"version":3,"sources":["assets/logo/KC_Logo.svg","components/Swerve.js","styles/colors.js","helpers/localize.js","components/Splash.js","components/Section.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","Svg","styled","svg","Swerve","props","fillTop","inverted","fillBottom","state","classes","className","this","xmlns","version","viewBox","fill","preserveAspectRatio","d","React","Component","defaultProps","localize","bucket","key","translations","en_US","get","Container","div","process","Logo","img","Caption","Title","Subtitle","Splash","counter","setState","interval","setInterval","clearInterval","src","logo","alt","hidden","personalData","fullName","dangerouslySetInnerHTML","__html","_computeSubtitleText","startTimeISO","Date","codingStartDate","startTime","moment","diff","duration","y","years","mo","months","days","h","hours","min","minutes","s","seconds","sinceStr","join","sprintf","section","SectionTitle","h1","_computeContainerStyles","even","last","title","odd","styles","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7987c864.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/KC_Logo.a176ebc6.svg\";","import React from 'react';\nimport styled from 'styled-components';\nimport { white, lightGray } from '../styles/colors';\n\nconst Svg = styled.svg`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 5vh;\n\n  &.flipped {\n    transform: scaleX(-1);\n  }\n`;\n\nexport default class Swerve extends React.Component {\n  static defaultProps = {\n    inverted: false,\n    fillTop: white,\n    fillBottom: lightGray\n  };\n\n  constructor(props) {\n    super(props);\n\n    const fillTop = props.inverted ? props.fillBottom : props.fillTop;\n    const fillBottom = props.inverted ? props.fillTop : props.fillBottom;\n\n    this.state = {\n      fillTop,\n      fillBottom,\n      classes: props.classes\n    };\n\n    if (props.inverted) {\n      this.state.classes = `${this.state.classes} flipped`;\n    }\n  }\n\n  render() {\n    return (\n      <Svg\n        className={this.state.classes}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        viewBox=\"0 0 4.66666 0.333331\"\n        fill={this.state.fillTop}\n        preserveAspectRatio=\"none\">\n\n          <path fill={this.state.fillBottom} d=\"M-7.87402e-006 0.0148858l0.00234646 0c0.052689,0.0154094 0.554437,0.154539 1.51807,0.166524l0.267925 0c0.0227165,-0.00026378 0.0456102,-0.000582677 0.0687992,-0.001 1.1559,-0.0208465 2.34191,-0.147224 2.79148,-0.165524l0.0180591 0 0 0.166661 -7.87402e-006 0 0 0.151783 -4.66666 0 0 -0.151783 -7.87402e-006 0 0 -0.166661z\"></path>\n\n      </Svg>\n    );\n  }\n}\n","export const white = '#fff';\nexport const black = '#595959';\nexport const gray = '#999';\nexport const lightGray = '#eee';\n","import get from 'lodash/get';\nimport en_US from '../assets/i18n/en_US.json';\n\nexport function localize(bucket, key) {\n  const translations = en_US;\n  return get(translations, `${bucket}.${key}`);\n}\n","import React from 'react';\nimport Swerve from '../components/Swerve';\nimport styled from 'styled-components';\nimport sprintf from 'sprintf';\nimport moment from 'moment';\nimport logo from '../assets/logo/KC_Logo.svg';\nimport personalData from '../assets/data.json';\nimport { white, gray } from '../styles/colors';\nimport { localize } from '../helpers/localize';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 80vh;\n  background-color: ${white};\n\n  /*\n  background-image: url('${process.env.PUBLIC_URL}/cloud.jpg');\n  background-size: cover;\n  */\n`;\n\nconst Logo = styled.img`\n  pointer-events: none;\n`;\n\nexport const Caption = styled.div`\n  margin-bottom: 0.55em;\n  font-size: calc(12px + 0.75vmin);\n  font-weight: bold;\n  text-transform: uppercase;\n  color: ${gray};\n`;\n\nexport const Title = styled.div`\n  font-size: calc(12px + 2vmin);\n  font-weight: bold;\n  text-transform: uppercase;\n  letter-spacing: 0.25em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 2em;\n  font-size: calc(12px + 0.5vmin);\n`;\n\nexport default class Splash extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      interval: setInterval(() => {\n        this.setState({ counter: this.state.counter + 1 });\n      }, 1000)\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.interval);\n    this.setState({ interval: null });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Logo src={logo} alt=\"logo\" hidden />\n\n        <Caption>{localize('Splash', 'front_end_developer')}</Caption>\n        <Title>{personalData.fullName}</Title>\n\n        <Subtitle dangerouslySetInnerHTML={{__html: this._computeSubtitleText(this.state.counter)}}></Subtitle>\n\n        <Swerve />\n      </Container>\n    );\n  }\n\n  _computeSubtitleText(counter) {\n    const startTimeISO = new Date(personalData.codingStartDate);\n\n    const startTime = moment(startTimeISO);\n    const currTime = moment();\n    const diff = currTime.diff(startTime);\n    const duration = moment.duration(diff);\n\n    const y = duration.years();\n    const mo = duration.months();\n    const d = duration.days();\n    const h = duration.hours();\n    const min = duration.minutes();\n    const s = duration.seconds();\n    const sinceStr = [\n      `<b>${y}</b> ${localize('Time', `year${y === 1 ? '' : 's'}`)}`,\n      `<b>${mo}</b> ${localize('Time', `month${mo === 1 ? '' : 's'}`)}`,\n      `<b>${d}</b> ${localize('Time', `day${d === 1 ? '' : 's'}`)}`,\n      `<b>${h}</b> ${localize('Time', `hour${h === 1 ? '' : 's'}`)}`,\n      `<b>${min}</b> ${localize('Time', `minute${min === 1 ? '' : 's'}`)}`,\n      `<b>${s}</b> ${localize('Time', `second${s === 1 ? '' : 's'}`)}`\n    ].join(', ');\n\n    // Coding for 7 years, 4 months, 26 days, 4 hours, and 32 seconds\n    return sprintf(localize('Splash', 'coding_for'), sinceStr);\n  }\n}\n","import React from 'react';\nimport Swerve from '../components/Swerve';\nimport styled from 'styled-components';\nimport { white, lightGray } from '../styles/colors';\n\nexport const Container = styled.section`\n  position: relative;\n  height: 40vh;\n  padding: 3em 0;\n  background-color: ${lightGray};\n  text-align: center;\n\n  &.even {\n    background-color: ${white};\n  }\n\n  &.last > .swerve {\n    display: none;\n  }\n`;\n\nexport const SectionTitle = styled.h1`\n  text-transform: uppercase;\n`;\n\nexport default class Splash extends React.Component {\n  static defaultProps = {\n    title: 'test',\n    odd: false,\n    even: false,\n    last: false\n  };\n\n  render() {\n    return (\n      <Container className={this._computeContainerStyles(this.props.even, this.props.last)}>\n        <SectionTitle>{this.props.title}</SectionTitle>\n        <Swerve classes=\"swerve\" inverted={this.props.odd} />\n      </Container>\n    );\n  }\n\n  _computeContainerStyles(even, last) {\n    const styles = [];\n    if (even) styles.push('even');\n    if (last) styles.push('last');\n    return styles.join(' ');\n  }\n}\n","import React from 'react';\nimport Splash from '../components/Splash';\nimport Section from '../components/Section';\nimport { localize } from '../helpers/localize';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Splash />\n        <div>\n          <Section title={localize('Common', 'about')} odd />\n          <Section title={localize('Common', 'projects')} even />\n          <Section title={localize('Common', 'contact')} odd last />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}